package comp3111.covid;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Tab;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.application.Application;
import javafx.beans.property.SimpleFloatProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.chart.LineChart;
//import javafx.scene.chart.NumberAxis;
import javafx.scene.control.CheckMenuItem;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.MenuButton;
import javafx.scene.control.SelectionMode;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by
 * SceneBuilder
 */
public class Controller {

	@FXML
	private Button importCSV;

	@FXML
	private Button buttonConfirmedCases;

	@FXML
	private Button buttonConfirmedDeaths;

	@FXML
	private Button buttonRateOfVaccination;

	@FXML
	private ListView<String> countryEntry;
	// private String[] countries = {"Hong Kong0","Hong Kong1","Hong Kong2","Hong
	// Kong3","Hong Kong4"};
	private List<String> countries = DataAnalysis.getUniqueLocations();
	private ObservableList<String> countryList = FXCollections.observableArrayList(countries);

	@FXML
	private ListView<String> countryEntry2;
	private List<String> countries2 = DataAnalysis.getUniqueLocations();
	private ObservableList<String> countryList2 = FXCollections.observableArrayList(countries);

	@FXML
	private TextField dateEntry;

	@FXML
	private TextField dateEntry2;

	@FXML
	private Button generateA1;

	@FXML
	private Button generateB1;

	@FXML
	private Button generateC1;

	@FXML
	private Label table_label;

	@FXML
	private TableView<TableResult> table;

	@FXML
	private TableColumn<TableResult, String> country;

	@FXML
	private TableColumn<TableResult, Integer> table_output1;

	@FXML
	private TableColumn<TableResult, Float> table_output2;

	@FXML
	private Label chart_label;

	@FXML
	private LineChart<?, ?> chart;

	@FXML
	private Button generateA2;

	@FXML
	private Button generateB2;

	@FXML
	private Button generateC2;

	@FXML
	private Tab tabApp1;

	@FXML
	private Tab tabApp2;

	@FXML
	private Tab tabApp3;

	@FXML
	private Tab tabReport1;

	@FXML
	private Tab tabReport2;

	@FXML
	private Tab tabReport3;

	@FXML
	private Tab tabTaskZero;

	@FXML
	private TextArea textAreaConsole;

	@FXML
	private TextArea textAreaConsole2;

	@FXML
	private TextField textfieldDataset;

	@FXML
	private TextField textfieldISO;

	@FXML
	void doImportCSV(ActionEvent event) {
		String iDataset = textfieldDataset.getText();
		DataAnalysis.setClass(iDataset);

		System.out.print("Test End" + "\n");

		countries = DataAnalysis.getUniqueLocations();
		countryList = FXCollections.observableArrayList(countries);

		countries2 = DataAnalysis.getUniqueLocations();
		countryList2 = FXCollections.observableArrayList(countries);

		initialize();
	}
	
	public class TableResult {
		private SimpleStringProperty tableCountryName;
		private SimpleIntegerProperty tableOutput1;
		private SimpleFloatProperty tableOutput2;

		public TableResult(String tableCountryName, int tableOutput1, float tableOutput2) {
			this.setTableCountryName(tableCountryName);
			this.setTableOutput1(tableOutput1);
			this.setTableOutput2(tableOutput2);
		}

		public String getTableCountryName() {
			return tableCountryName.get();
		}

		public void setTableCountryName(String tableCountryName) {
			this.tableCountryName = new SimpleStringProperty(tableCountryName);
		}

		public int getTableOutput1() {
			return tableOutput1.get();
		}

		public void setTableOutput1(int tableOutput1) {
			this.tableOutput1 = new SimpleIntegerProperty(tableOutput1);
		}

		public float getTableOutput2() {
			return tableOutput2.get();
		}

		public void setTableOutput2(float tableOutput2) {
			this.tableOutput2 = new SimpleFloatProperty(tableOutput2);
		}
	}

	private

	@FXML void generateTableA1(ActionEvent event) {
		// textAreaConsole.clear();

		String date;
		if (dateEntry.getText() == null || dateEntry.getText().trim().isEmpty()) {
			textAreaConsole.appendText("Please Enter a Date" + "\n");
			return;
		} else if (false) {

		} else {
			date = dateEntry.getText();
			// dateEntry.clear();
		}
		/*
		 * textAreaConsole.appendText( "Countries:" + "\n");
		 * 
		 * for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {
		 * textAreaConsole.appendText( countryList.get(i) + "\n"); }
		 * 
		 * textAreaConsole.appendText( "\nDate:\n" + date + "\n");
		 * textAreaConsole.appendText( "\n" + "Generating Table for task A"+ "\n");
		 */
		textAreaConsole.appendText("\n");
		ObservableList<TableResult> countryView = FXCollections.observableArrayList();
		for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {

			textAreaConsole
					.appendText(countryList.get(i) + " " + DataAnalysis.retrieveTotalCases(countryList.get(i), date)
							+ " " + DataAnalysis.retrieveTotalCasesPer1M(countryList.get(i), date) + "\n");
			countryView
					.add(new TableResult(countryList.get(i), (DataAnalysis.retrieveTotalCases(countryList.get(i), date)),
							(DataAnalysis.retrieveTotalCasesPer1M(countryList.get(i), date))));
		}
		textAreaConsole.appendText("World \n");
		table_label.setText("Number of Confirmed COVID-19 Cases as of " + date);
		country.setText("Country");
		country.setCellValueFactory(new PropertyValueFactory<TableResult, String>("tableCountryName"));
		table_output1.setText("Total Cases");
		table_output1.setCellValueFactory(new PropertyValueFactory<TableResult, Integer>("tableOutput1"));
		table_output2.setText("Total Cases (per 1M)");
		table_output2.setCellValueFactory(new PropertyValueFactory<TableResult, Float>("tableOutput1"));
		table.setItems(countryView);
		
		// country.setCellValueFactory(new PropertyValueFactory<TableResult,
		// String>("Country"));
		// table_output1.setCellValueFactory(new PropertyValueFactory<TableResult,
		// Integer>("Total Cases"));
		// table_output2.setCellValueFactory(new PropertyValueFactory<TableResult,
		// Float>("Total Cases (per 1M)"));

		// table.setItems(getTableResult(countryList, date));
	}

	/*
	 * public ObservableList<TableResult> getTableResult(ObservableList<String>
	 * countryList, String date) { ObservableList<TableResult> country =
	 * FXCollections.observableArrayList(); for (Integer i :
	 * countryEntry.getSelectionModel().getSelectedIndices()) { country.add(new
	 * TableResult(countryList.get(i),
	 * DataAnalysis.retrieveTotalCases(countryList.get(i), date),
	 * DataAnalysis.retrieveTotalCasesPer1M(countryList.get(i), date))); } return
	 * country; }
	 */

	@FXML
	void generateTableB1(ActionEvent event) {
		// textAreaConsole.clear();

		String date;
		if (dateEntry.getText() == null || dateEntry.getText().trim().isEmpty()) {
			textAreaConsole.appendText("Please Enter a Date" + "\n");
			return;
		} else if (false) {

		} else {
			date = dateEntry.getText();
			// dateEntry.clear();
		}
		/*
		 * textAreaConsole.appendText( "Countries:" + "\n");
		 * 
		 * for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {
		 * textAreaConsole.appendText( countryList.get(i) + "\n"); }
		 * 
		 * textAreaConsole.appendText( "\nDate:\n" + date + "\n");
		 * textAreaConsole.appendText( "\n" + "Generating Table for task A"+ "\n");
		 */
		textAreaConsole.appendText("\n");
		ObservableList<TableResult> countryView = FXCollections.observableArrayList();
		for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {

			textAreaConsole
					.appendText(countryList.get(i) + " " + DataAnalysis.retrieveTotal_deaths(countryList.get(i), date)
							+ " " + DataAnalysis.retrieveTotalDeathsPer1M(countryList.get(i), date) + "\n");
			countryView
					.add(new TableResult(countryList.get(i), DataAnalysis.retrieveTotalCases(countryList.get(i), date),
							DataAnalysis.retrieveTotalCasesPer1M(countryList.get(i), date)));
		}
		textAreaConsole.appendText("World \n");
		table_label.setText("Number of Confirmed COVID-19 Deaths as of " + date);
		country.setText("Country");
		country.setCellValueFactory(new PropertyValueFactory<TableResult, String>("Country"));
		table_output1.setText("Total Deaths");
		table_output1.setCellValueFactory(new PropertyValueFactory<TableResult, Integer>("Total Deaths"));
		table_output2.setText("Total Deaths (per 1M)");
		table_output2.setCellValueFactory(new PropertyValueFactory<TableResult, Float>("Total Deaths (per 1M)"));
		table.setItems(countryView);
		// Defining X axis
		// NumberAxis xAxis = new NumberAxis(1960, 2020, 10);
		// xAxis.setLabel("Years");

		// Defining y axis
		// NumberAxis yAxis = new NumberAxis(0, 350, 50);
		// yAxis.setLabel("No.of schools");
		// LineChart lineChart = new LineChart(xAxis, yAxis);
	}

	@FXML
	void generateTableC1(ActionEvent event) {
		// textAreaConsole.clear();

		String date;
		if (dateEntry.getText() == null || dateEntry.getText().trim().isEmpty()) {
			textAreaConsole.appendText("Please Enter a Date" + "\n");
			return;
		} else if (false) {

		} else {
			date = dateEntry.getText();
			// dateEntry.clear();
		}
		/*
		 * textAreaConsole.appendText( "Countries:" + "\n");
		 * 
		 * for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {
		 * textAreaConsole.appendText( countryList.get(i) + "\n"); }
		 * 
		 * textAreaConsole.appendText( "\nDate:\n" + date + "\n");
		 * textAreaConsole.appendText( "\n" + "Generating Table for task A"+ "\n");
		 */
		textAreaConsole.appendText("\n");
		ObservableList<TableResult> countryView = FXCollections.observableArrayList();
		for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {

			textAreaConsole.appendText(
					countryList.get(i) + " " + DataAnalysis.retrieveRateOfVaccination(countryList.get(i), date) + " "
							+ DataAnalysis.retrieveRateOfVaccination(countryList.get(i), date) + "\n");
			countryView
					.add(new TableResult(countryList.get(i), DataAnalysis.retrieveTotalCases(countryList.get(i), date),
							DataAnalysis.retrieveTotalCasesPer1M(countryList.get(i), date)));
		}
		textAreaConsole.appendText("World \n");
		table_label.setText("Rate of Vaccination against COVID-19 as of " + date);
		country.setText("Country");
		country.setCellValueFactory(new PropertyValueFactory<TableResult, String>("Country"));
		table_output1.setText("Fully Vaccinated");
		table_output1.setCellValueFactory(new PropertyValueFactory<TableResult, Integer>("Fully Vaccinated"));
		table_output2.setText("Rate of Vaccination");
		table_output2.setCellValueFactory(new PropertyValueFactory<TableResult, Float>("Rate of Vaccination"));
		table.setItems(countryView);
	}

	@FXML
	void generateTableA2(ActionEvent event) {
		// textAreaConsole.clear();

		String date;
		if (dateEntry2.getText() == null || dateEntry2.getText().trim().isEmpty()) {
			textAreaConsole2.appendText("Please Enter a Date" + "\n");
			return;
		} else if (false) {

		} else {
			date = dateEntry2.getText();
			// dateEntry.clear();
		}
		/*
		 * textAreaConsole.appendText( "Countries:" + "\n");
		 * 
		 * for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {
		 * textAreaConsole.appendText( countryList.get(i) + "\n"); }
		 * 
		 * textAreaConsole.appendText( "\nDate:\n" + date + "\n");
		 * textAreaConsole.appendText( "\n" + "Generating Table for task A"+ "\n");
		 */
		textAreaConsole2.appendText("\n");
		for (Integer i : countryEntry2.getSelectionModel().getSelectedIndices()) {

			textAreaConsole2
					.appendText(countryList2.get(i) + " " + DataAnalysis.retrieveTotalCases(countryList2.get(i), date)
							+ " " + DataAnalysis.retrieveTotalCasesPer1M(countryList2.get(i), date) + "\n");
		}
		textAreaConsole2.appendText("World \n");

	}

	@FXML
	void generateTableB2(ActionEvent event) {
		// textAreaConsole.clear();

		String date;
		if (dateEntry2.getText() == null || dateEntry2.getText().trim().isEmpty()) {
			textAreaConsole2.appendText("Please Enter a Date" + "\n");
			return;
		} else if (false) {

		} else {
			date = dateEntry2.getText();
			// dateEntry.clear();
		}
		/*
		 * textAreaConsole.appendText( "Countries:" + "\n");
		 * 
		 * for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {
		 * textAreaConsole.appendText( countryList.get(i) + "\n"); }
		 * 
		 * textAreaConsole.appendText( "\nDate:\n" + date + "\n");
		 * textAreaConsole.appendText( "\n" + "Generating Table for task A"+ "\n");
		 */
		textAreaConsole2.appendText("\n");
		for (Integer i : countryEntry2.getSelectionModel().getSelectedIndices()) {

			textAreaConsole2
					.appendText(countryList2.get(i) + " " + DataAnalysis.retrieveTotal_deaths(countryList2.get(i), date)
							+ " " + DataAnalysis.retrieveTotalDeathsPer1M(countryList2.get(i), date) + "\n");
		}
		textAreaConsole2.appendText("World \n");

	}

	@FXML
	void generateTableC2(ActionEvent event) {
		// textAreaConsole.clear();

		String date;
		if (dateEntry2.getText() == null || dateEntry2.getText().trim().isEmpty()) {
			textAreaConsole2.appendText("Please Enter a Date" + "\n");
			return;
		} else if (false) {

		} else {
			date = dateEntry2.getText();
			// dateEntry.clear();
		}
		/*
		 * textAreaConsole.appendText( "Countries:" + "\n");
		 * 
		 * for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {
		 * textAreaConsole.appendText( countryList.get(i) + "\n"); }
		 * 
		 * textAreaConsole.appendText( "\nDate:\n" + date + "\n");
		 * textAreaConsole.appendText( "\n" + "Generating Table for task A"+ "\n");
		 */
		textAreaConsole2.appendText("\n");
		for (Integer i : countryEntry2.getSelectionModel().getSelectedIndices()) {

			textAreaConsole2.appendText(
					countryList2.get(i) + " " + DataAnalysis.retrieveRateOfVaccination(countryList2.get(i), date) + " "
							+ DataAnalysis.retrieveRateOfVaccination(countryList2.get(i), date) + "\n");
		}
		textAreaConsole2.appendText("World \n");

	}

	@FXML
	public void initialize() {
		countryEntry.setItems(countryList);
		countryEntry.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

		countryEntry2.setItems(countryList);
		countryEntry2.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

	}
}
