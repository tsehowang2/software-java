package comp3111.covid;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Tab;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.CheckMenuItem;
import javafx.scene.control.ListView;
import javafx.scene.control.MenuButton;
import javafx.scene.control.SelectionMode;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by SceneBuilder 
 */



public class Controller {

    @FXML
    private Button importCSV;
    
    @FXML
    private Button buttonConfirmedCases;

    @FXML
    private Button buttonConfirmedDeaths;

    @FXML
    private Button buttonRateOfVaccination;

    
    
    @FXML
    private ListView<String> countryEntry;
    //private String[] countries = {"Hong Kong0","Hong Kong1","Hong Kong2","Hong Kong3","Hong Kong4"};
    private List<String> countries = DataAnalysis.getUniqueLocations();
    private ObservableList<String> countryList = FXCollections.observableArrayList(countries);
    
    @FXML
    private ListView<String> countryEntry2;
    private List<String> countries2 = DataAnalysis.getUniqueLocations();
    private ObservableList<String> countryList2 = FXCollections.observableArrayList(countries);
    
    
    
    @FXML
    private TextField dateEntry;
    
    @FXML
    private TextField dateEntry2;
    
    @FXML
    private TextField dateEntry3;

    @FXML
    private Button generateA1;
    
    @FXML
    private Button generateB1;
    
    @FXML
    private Button generateC1;
    
    @FXML
    private Button generateA2;
    
    @FXML
    private Button generateB2;
    
    @FXML
    private Button generateC2;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private Tab tabReport1;

    @FXML
    private Tab tabReport2;

    @FXML
    private Tab tabReport3;

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextArea textAreaConsole;
    
    @FXML
    private TextArea textAreaConsole2;
    
    @FXML
    private TextField textfieldDataset;

    @FXML
    private TextField textfieldISO;

    @FXML
    void doImportCSV(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	DataAnalysis.setClass(iDataset);
    	
    	System.out.print( "Test End" + "\n");

    	countries = DataAnalysis.getUniqueLocations();
    	countryList = FXCollections.observableArrayList(countries);
    	
    	countries2 = DataAnalysis.getUniqueLocations();
    	countryList2 = FXCollections.observableArrayList(countries);
    	

    	initialize();
    }
    
    private 

    @FXML
    void generateTableA1(ActionEvent event) {
    	//textAreaConsole.clear();
    	//textAreaConsole.appendText(null);
    	
    	String date;
    	if (dateEntry.getText() == null || dateEntry.getText().trim().isEmpty()) {
    		textAreaConsole.appendText("\nPlease Enter a Date" + "\n");
    		return;
    	}
    	else {
    		date = dateEntry.getText();
    		if (DataAnalysis.isValidDate(date) == false) {
    			textAreaConsole.appendText("\nPlease Enter a VALID Date" + "\n");
    			return;
    		}
        	//dateEntry.clear();
    	}
    	
    	textAreaConsole.appendText("\n");
    	textAreaConsole.appendText("Number of Confirmed COVID-19 Cases as of " + date + "\n");
    	textAreaConsole.appendText( "Country - Total Cases - Total Cases (per 1M)" + "\n");
    	int info1;
    	float info2;
    	for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {
    		info1 = DataAnalysis.retrieveTotalCases(countryList.get(i), date);
    		info2 = DataAnalysis.retrieveTotalCasesPer1M(countryList.get(i), date);
        	
    		textAreaConsole.appendText( countryList.get(i) + " ");
    		
    		if (info1 != -1) {
    			textAreaConsole.appendText(info1 + " "); 
    		} 
    		else {
    			textAreaConsole.appendText("NaN ");
    		}
    		if (info2 != -1) {
    			textAreaConsole.appendText(info2 + " "); 
    		} 
    		else {
    			textAreaConsole.appendText("NaN ");
    		}
    		
        	textAreaConsole.appendText("\n");
    	}
    	
    	textAreaConsole.appendText( "World " + DataAnalysis.retrieveTotalCases("World", date) + " " +
    			 + DataAnalysis.retrieveTotalCasesPer1M("World", date));
    	

    	textAreaConsole.appendText("\n");
    	
    	

    } 

    @FXML
    void generateTableB1(ActionEvent event) {
    	//textAreaConsole.clear();

    	String date;
    	if (dateEntry.getText() == null || dateEntry.getText().trim().isEmpty()) {
    		textAreaConsole.appendText("\nPlease Enter a Date" + "\n");
    		return;
    	}
    	else {
    		date = dateEntry.getText();
    		if (DataAnalysis.isValidDate(date) == false) {
    			textAreaConsole.appendText("\nPlease Enter a VALID Date" + "\n");
    			return;
    		}
        	//dateEntry.clear();
    	}
    	
    	textAreaConsole.appendText("\n");
    	textAreaConsole.appendText("Number of Confirmed COVID-19 Deaths as of " + date + "\n");
    	textAreaConsole.appendText("Country - Total Deaths - Total Deaths (per 1M)" + "\n");
    	int info1;
    	float info2;
    	for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {
    		info1 = DataAnalysis.retrieveTotal_deaths(countryList.get(i), date);
    		info2 = DataAnalysis.retrieveTotalDeathsPer1M(countryList.get(i), date);
        	
    		textAreaConsole.appendText( countryList.get(i) + " ");
    		
    		if (info1 != -1) {
    			textAreaConsole.appendText(info1 + " "); 
    		} 
    		else {
    			textAreaConsole.appendText("NaN ");
    		}
    		if (info2 != -1) {
    			textAreaConsole.appendText(info2 + " "); 
    		} 
    		else {
    			textAreaConsole.appendText("NaN ");
    		}
    		
        	textAreaConsole.appendText("\n");
    	}

    	textAreaConsole.appendText( "World " + DataAnalysis.retrieveTotal_deaths("World", date) + " " +
   			 + DataAnalysis.retrieveTotalDeathsPer1M("World", date));
    	
    	textAreaConsole.appendText("\n");
    	

    } 

    @FXML
    void generateTableC1(ActionEvent event) {

    	//textAreaConsole.clear();

    	String date;
    	if (dateEntry.getText() == null || dateEntry.getText().trim().isEmpty()) {
    		textAreaConsole.appendText("\nPlease Enter a Date" + "\n");
    		return;
    	}
    	else {
    		date = dateEntry.getText();
    		if (DataAnalysis.isValidDate(date) == false) {
    			textAreaConsole.appendText("\nPlease Enter a VALID Date" + "\n");
    			return;
    		}
        	//dateEntry.clear();
    	}
    	
    	textAreaConsole.appendText("\n");
    	textAreaConsole.appendText("Rate of Vaccination against COVID-19 as of " + date + "\n");
    	textAreaConsole.appendText("Country - Fully Vaccinated - Rate of Vaccination" + "\n");
    	int info1;
    	float info2;
    	for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {
    		info1 = DataAnalysis.retrieveFullyVaccinated(countryList.get(i), date);
    		info2 = DataAnalysis.retrieveRateOfVaccination(countryList.get(i), date);
        	
    		textAreaConsole.appendText( countryList.get(i) + " ");
    		
    		if (info1 != -1) {
    			textAreaConsole.appendText(info1 + " "); 
    		} 
    		else {
    			textAreaConsole.appendText("NaN ");
    		}
    		if (info2 != -1) {
    			textAreaConsole.appendText(info2 + " "); 
    		} 
    		else {
    			textAreaConsole.appendText("NaN ");
    		}
    		
        	textAreaConsole.appendText("\n");
    	}
    	textAreaConsole.appendText( "World " + DataAnalysis.retrieveFullyVaccinated("World", date) + " " +
   			 + DataAnalysis.retrieveFullyVaccinated("World", date));
    	
    	textAreaConsole.appendText("\n");


    } 
    @FXML
    void generateTableA2(ActionEvent event) {
    	//textAreaConsole.clear();

    	String startdate;
    	String enddate;
    	if (dateEntry2.getText() == null || dateEntry2.getText().trim().isEmpty()) {
    		textAreaConsole2.appendText("Please Enter a Date" + "\n");
    		return;
    	}
    	else if (false) {
    		
    	}
    	else {
    		startdate = dateEntry2.getText();
    		enddate = dateEntry3.getText();
        	//dateEntry.clear();
    	}

    	textAreaConsole2.appendText("\n");
    	for (Integer i : countryEntry2.getSelectionModel().getSelectedIndices()) {
    		
        	textAreaConsole2.appendText( countryList2.get(i) + " from " + startdate + " to " + enddate + "\n");
    	}
    	textAreaConsole2.appendText( "World \n" );
    	

    } 

    @FXML
    void generateTableB2(ActionEvent event) {
    	//textAreaConsole.clear();

    	String date;
    	if (dateEntry2.getText() == null || dateEntry2.getText().trim().isEmpty()) {
    		textAreaConsole2.appendText("Please Enter a Date" + "\n");
    		return;
    	}
    	else if (false) {
    		
    	}
    	else {
    		date = dateEntry2.getText();
        	//dateEntry.clear();
    	}
    	/*
    	textAreaConsole.appendText( "Countries:" + "\n");

    	for (Integer i : countryEntry.getSelectionModel().getSelectedIndices()) {
        	textAreaConsole.appendText( countryList.get(i) + "\n");
    	}
    	
    	textAreaConsole.appendText( "\nDate:\n" + date + "\n");
    	textAreaConsole.appendText( "\n" + "Generating Table for task A"+ "\n");
    	*/
    	textAreaConsole2.appendText("\n");
    	for (Integer i : countryEntry2.getSelectionModel().getSelectedIndices()) {
    		
        	textAreaConsole2.appendText( countryList2.get(i) + " " + DataAnalysis.retrieveTotal_deaths(countryList2.get(i), date) + " " + 
        			DataAnalysis.retrieveTotalDeathsPer1M(countryList2.get(i), date) + "\n");
    	}
    	textAreaConsole2.appendText( "World \n" );
    	

    } 

    @FXML
    void generateTableC2(ActionEvent event) {
    	//textAreaConsole.clear();

    	String date;
    	if (dateEntry2.getText() == null || dateEntry2.getText().trim().isEmpty()) {
    		textAreaConsole2.appendText("Please Enter a Date" + "\n");
    		return;
    	}
    	else if (false) {
    		
    	}
    	else {
    		date = dateEntry2.getText();
        	//dateEntry.clear();
    	}

    	textAreaConsole2.appendText("\n");
    	for (Integer i : countryEntry2.getSelectionModel().getSelectedIndices()) {
    		
        	textAreaConsole2.appendText( countryList2.get(i) + " " + DataAnalysis.retrieveRateOfVaccination(countryList2.get(i), date) + " " + 
        			DataAnalysis.retrieveRateOfVaccination(countryList2.get(i), date) + "\n");
    	}
    	textAreaConsole2.appendText( "World \n" );
    	

    } 

    
    @FXML
    public void initialize() {
    	countryEntry.setItems(countryList);
    	countryEntry.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);    	
    	
        countryEntry2.setItems(countryList);
        countryEntry2.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE); 

    }
}

